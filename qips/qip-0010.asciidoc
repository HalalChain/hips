    QIP: 0010
    Title: The Numerical Way of Offline Confirmation in SPECTRE
    Author: Zhixiang Zhu <zzxiang21cn@hotmail.com>
    Category: Core
    Status: Draft
    Created: 2019-07-19

### Online confirmation and offline confirmation

By adopting online confirmation policy, a mining node must keep online and maintain good connections
with other nodes in the mining network before a block gains confirmation since the node received
that block. The online confirmation policy is described in link:hip-0008.asciidoc[another proposal
before].

If the mining node may become offline before the received node gains confirmation, the node should
adopt offline policy to confirm the acception of the block. Similarly with the online policy, we
calculate a risk value of the block and confirm the acception of the block if the risk value is
smaller than a given threshold _&#1013;_. The difference is that the offline policy uses only
structural information of the block DAG ledger (with the exception of making sure that the block to
check has been published for at least 2 &middot; _d_ seconds, where _d_ is the upper bound on the
recent delay diameter in the network), and does not rely on measurements of blocks’ timings.

### The numerical way of calculating risk in offline way

The risk value is calculated by algorithm 3 in the SPECTRE paper.

image::hip-0010/algorithm_3.jpg[]

+++<img src="https://latex.codecogs.com/svg.latex?\overline{future}(x,G)"
title="\overline{future}(x,G)" />+++ is defined as _future_ (_x,G_) &xcup; {_x_}.

_vote~x,y~_(_z_) or _vote~x,y~_(_z,G_) is block _z_'s voting-profile on the pair of blocks _x_ and _y_
in block DAG ledger _G_. _vote~x,y~_(_z,G_) = -1 represents _x_ preceding _y_ (_x_ &pr; _y_),
_vote~x,y~_(_z,G_) = +1 represents _y_ preceding _x_, and _vote~x,y~_(_z,G_) = 0 represents a tie.
Importantly, _vote_(_z,G_) is an asymmetric relation: _vote~y,x~_(_z,G_) = _-vote~x,y~_(_z,G_).

_gap_(_b,G_) denotes the size of the set {_z_ &isin; _anticone_(_b,G_): _vote~z,b~_(_virtual_(_G_))
&ge; 0}. That is, from the view of _virtual_(_G_), how many blocks in _anticone_(_b,G_) are preceded
by _b_.

Let _G_ be a block DAG, _b_ a block in _G_, and _K_ a whole number. The DAG &#x27E8; _G,b,K_ &#x27E9;
is obtained by creating a new chain _z~1~_, &hellip;, _z~K~_ of _K_ hypothetical blocks, connecting
an edge from _z~1~_ to _b_ and replacing every edge (_z,b_) &isin; _G_ with (_z, z~K~_) &isin; _G_,
where _z_ is any block in _G_ other than _z~1~_, &hellip;, _z~K~_ and _b_. Essentially, this adds to
the DAG _K_ artificial voters which vote strongly _b_ &pr; _y_, against any _y_ &notin;
_past_(_b,G_).

#### _f~pre_mine~_

The function _f~pre_mine~_ upper bounds the probability that the attacker has gained an advantage
larger than _l_ (i.e., attacker nodes have created more than _l_ blocks than honest nodes have
created) during the pre-mining phase (i.e., up until the creation of _x_).

The numerical method to calculate _f~pre_mine~_ is as follows.

Put _&delta;_ := _&alpha; &middot; &lambda; &middot; d_, where
 
- _d_ is the upper bound on the recent delay diameter in the network,
- _&alpha;_ is the attacker’s relative computational power,
- _&lambda;_ is the block creation rate.

Pick some _N_ &Gt; 1, and define an _N_ by _N_ float matrix _T_ as follows. For all 1 &le; _l_ &lt;
_N_ - 1, _T_~_l_-1,_l_~ = 1 - &alpha;, _T_~_l_+1,l~ = &alpha;, and for _l_ = _N_ - 1: _T_~_l_-1,_l_~
= 1 - &alpha;, _T_~_l_,_l_~ = &alpha;.

The first column of the matrix is defined by:

_T_~0,0~ := (1
- _&alpha;_) &middot; _e^-&delta;^_, _T_~1,0~ = _e^-&delta;^ &middot; &alpha;_ + _e^-&delta;^
  &middot; &delta;_,

for 1 &lt; _l_ &lt; _N_ - 1: _T_~_l_,0~ = _e^-&delta;^ &middot; &delta;^l^/l_!,

and _T_~_N_-1,0~ = 1
- _e^-&delta;^_ &middot; (_&delta;_^0^/0! &plus; _&delta;_^1^/1! + ... + _&delta;_^_N_-2^/(_N_-2)!).

Find the eigenvector _&pi;_ of _T_ corresponding to the eigenvalue 1, where _&pi;(l)_ &geq; 0 and
the sum of _&pi;_ is 1. Define &Pi;(_l_) := &Sigma;^l^~l^'^=0~_&pi;_(_l'_), and, finally, define
_f~pre_mine~(l)_ := 1 - &Pi;((_l_-1)^+^).

Note that _x_^+^ is defined as max{0, _x_}.

#### _f~post_mine~_

The function _f~post_mine~_ upper bounds the probability that the attacker will ever be able to create
enough blocks so as to reverse the relation _x_ &pr; _y_.

image::hip-0010/f_post_mine.svg[]

Note that Poiss(_a, b_) is defined as _e^-a^a^b^/b_!.

#### _f~pre_pub~_

The function _f~pre_pub~_ upper bounds the probability that we have underestimated the variable _j_,
which upper bounds the number of honest blocks in _anticone(x,G)_.

image::hip-0010/f_pre_pub.svg[]

#### _f~post_pub~_

The function _f~post_pub~_ upper bounds the probability that we have underestimated the number of
honest blocks in _future(x,G)_.

image::hip-0010/f_post_pub.svg[]

where

image::hip-0010/f_distgap.svg[]
