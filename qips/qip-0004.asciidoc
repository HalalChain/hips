    QIP: 4
    Title: DAG Consensus
    Author: Jin <lochjin@gmail.com>
    Category: Core
    Status: Draft
    Created: 2019-03-25

# Abstract
Qitmeer adopts hybrid consensus that combines SPECTRE and GHOSTDAG (Phantom) in order to achieve fast confirmation and high throughput.


## Introduction

Block DAG, as the name implies, each node of the ledger is a block. It is not rigorous whether the node of the ledger is a block or the transaction, because the transaction can also be seen as a block with one transaction. Therefore, Block DAG represents a completely different DAG model, which is also a narrow definition. Actually, what Block DAG wants to solve is the problem of the orphan block rate in blockchain, that is, the blocks eliminated and discarded can also contribute to the throughput. To scale Bitcoin, the most intuitive idea is to increase the block rate or increase the block size. Certainly, Nakamoto will think of it but he doesn't do it, because both of them will increase the fork rate. Under the longest chain competition model of Bitcoin, the high fork rate represents the power required to overturn the longest fork may not be far less 50%. So Bitcoin is for the sake of safety and sacrifices the scalability. Block DAG is to solve the problem of how to increase the scalability without sacrificing security. Since Block DAG is the simplest and most intuitive solution of scalability based on the classic bitcoin, there is almost no change to any setting of Bitcoin, namely, the whole node through the computing power of free participation realizes the complete decentralization, 50% security guarantee，which is different from other scalability schemes such as sharding and layering. We call it the classic blockchain setting. And this DAG protocol that satisfies the classic blockchain setting is collectively called the "Block DAG protocol".  

image::qip-0004/b.jpg[blockdag,513]

From the diagram, it can be seen that every block confirms all the unconfirmed blocks, i.e. tips, and all the blocks that can be reached from one block are deemed prior to this block


## SPECTRE  

SPECTRE is a block-DAG based protocol  that achieves fast comfirmation and high throughput with 50% attack resilience.  SPECTRE guarantees safety, which means  a transaction is unlikely to be reverse once it is accepted. Also, SPECTRE guarantees fast confirmations for honest users rather than all users, so it is deemed as weak liveness.

There is a trade off between liveness and fast confirmation, SPECTRE prioritize the latter since weak liveness only affects malicious users. SPECTRE is built for payment model,  double spend can only be initiated by malicious users therefore it is only  likely to make their transactions delayed indefinitely.

SPECTRE is built for stateless transaction model, so there is no need to gain a linear order from all the blocks. Only when there're two blocks conflicting that a pairwise ordering is needed. 

SPECTRE employs a voting algorithm to decide which block wins, suppose block x has a conflicting transaction with another transaction in block y, and also suppose that block z is voting on them with following rules:

1. if z is only in x's future, z votes x in favor of y, denoted as x<y, vice versa.
2. if both x and y are in the past of z, then z follows the majority votes in its past.
3. If neither x nor y is in the past of z, then z votes according to the  majority votes in its future.
4. Both x and y vote for themselves unless one is in the past of another.

image::qip-0004/s.png[phantom,513]
An example on how a new block, number 12, votes:



> according to rule 4 and 1 x, 6, 7, 8 vote $x \prec y$, y, 9, 10, 11 vote $y \prec x$
> according to rule 2 rule 2, 12 votes according to its past, since not all blocks of its past have voted,  we change global view to block 12's local view, which means block 10 and 11 are excluded
> according to rule 3, block 5 votes $x \prec y$, since the majority votes of its future vote in favor x over y, that is  7, 8 over 9.  Note that current view is block'12 local view and block 11 is exculded so we cannot take its vote.
> block 1~4 vote $x \prec y$ according to rule 3

Now all the blocks in block 12' past have votes, 10 votes on x over 2 votes on y, so block 12 follows the majority and votes $x \prec y$ as well.


## PHANTOM

The high concurrency of DAG produces forks. A network's physical metrics are definite, say, propagation time that a block takes to travel around super majority network nodes, minimum bandwith of super majority nodes, also there are some parameters, such as block creation rate, faulty nodes percentage assumption. All lot these metrics and parameters determines the expected max fork number and then affects the throughput. Qitmeer technology is based on a transaction model so partial ordering of transaction is suffient; however, PHANTOM's total ordering not only provides the strong liveness gurantee , also it serves for the reward mechanism. 

Though SPECTRE's weak liveness won't affect honest users, it is more robust to make a strong liveness, that is every transaction, including the honest and the malicious,  can be accepted within definite time. SPECTRE can only guarantees parital ordering, to be more specific, pairwised ordering, PHANTOM is able to guarantee total ordering of all  blocks therefore we may produce a linear order. It is intuitive that if  nodes behave honestly, they will form a sub graph wherein each block has at most a specific number of forks, this number can be caculated from propagation time and block creation rate, denoted as $k$. This sub graph is denoted as k-cluter.  The biggest k-cluster is called  blue set and the rest blocks compose red set.

If one block x can travel to another block y, then they have partial order and the destination is prior to the origion. For example in figure, block J can travel to A through B, then they have partial order and A is prior to J. Note not all blocks have partial orders with other blocks, like B, C, D don't have partial order with each other. Inside a k-cluster, there are at most k blocks without partial order for each block. 
 
image::qip-0004/p.png[SPECTRE,436,396]

TODO: Total ordering to solve fair reward mechanism

Block DAG achieves consensus on the order of all events in it, Qitmeer can easily extend this agreement to achieve consensus on the state . It simply iterate over all transactions according to the agreed order, and accept each transaction that is consistent with those accepted so far. 