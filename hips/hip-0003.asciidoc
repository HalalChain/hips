    HIP: 3
    Title: Convert Block header time from uint32 to uint64
    Author: james.van2019@outlook.com
    Category: Core
    Status: Draft
    Created: 2019-03-12
    Requires (*optional):none
    Replaces (*optional): none

## Abstract
Now the HLC block size is 124,the type of the ntime is `uint32`,we increase the size of the time,from `uint32` to `uint64`.

image::hip-0003/block.png[]

## Blake2b Algorithm
Blake2b is a fast, secure hash function that is a modification of Blake algorithm. This cryptographic hash function is based on ChaCha stream cipher; designed by Daniel J. Bernstein. Blake2b is one of the algorithm based on Blake2 and the other one is Blake2s. The difference between them is Blake2b is optimized for 64-bit platforms whereas Blake2s is suitable for 8 to 32-bit platforms. Blake2 is faster and more secure than MD5, SHA-1, 2 and SHA-3 hash algorithms. To learn more about Blake2 hashing algorithm you may need to go through the official website.

image::hip-0003/speedTest.png[]

## Motivation
Because the Blake2b algorithm is implemented, the first few steps are based on the original data length, and the variable factor is modified to obtain M and V. Therefore, when we perform the opencl optimization algorithm, we perform the next calculation directly from M and V. Save generation time and save efficiency.

Because the opencl miner of the algorithm of blake2b needs the length of (header data)is Multiple of 8, if do this , the opencl has the best performance.

Why is Multiple of 8ï¼Ÿ
Because the parameter V splits 16 sets of data according to 8 and performs displacement. The final result is also 8 sets of 8 bytes of length data, which gives a length of 64 bytes, and Blake2b 256 takes the first 32 bytes.

```cpp
 // Target is passed in via headerIn[120 - 128]
 __kernel void search(__global ulong *headerIn, __global ulong *nonceOut) {
 ulong target = headerIn[15];
 ulong nonce = (ulong)get_global_id(0)+0x00FE00000F00000000;
 ulong m[16] = {headerIn[0], headerIn[1],
                            headerIn[2], headerIn[3],
                            headerIn[4], headerIn[5],
                            headerIn[6], headerIn[7],
                            headerIn[8], headerIn[9], headerIn[10], headerIn[11], headerIn[12], headerIn[13], headerIn[14], nonce };
 ulong v[16] = { 0x6a09e667f2bdc928, 0xbb67ae8584caa73b, 0x3c6ef372fe94f82b, 0xa54ff53a5f1d36f1,
                            0x510e527fade682d1, 0x9b05688c2b3e6c1f, 0x1f83d9abfb41bd6b, 0x5be0cd19137e2179,
                            0x6a09e667f3bcc908, 0xbb67ae8584caa73b, 0x3c6ef372fe94f82b, 0xa54ff53a5f1d36f1,
                            0x510e527fade68251, 0x9b05688c2b3e6c1f, 0xe07c265404be4294, 0x5be0cd19137e2179 };
 #define G(r,i,a,b,c,d) \
    	a = a + b + m[ blake2b_sigma[r][2*i] ]; \
    	((uint2*)&d)[0] = ((uint2*)&d)[0].yx ^ ((uint2*)&a)[0].yx; \
    	c = c + d; \
    	((uint2*)&b)[0] = ror64( ((uint2*)&b)[0] ^ ((uint2*)&c)[0], 24U); \
    	a = a + b + m[ blake2b_sigma[r][2*i+1] ]; \
    	((uint2*)&d)[0] = ror64( ((uint2*)&d)[0] ^ ((uint2*)&a)[0], 16U); \
    	c = c + d; \
        ((uint2*)&b)[0] = ror64_2( ((uint2*)&b)[0] ^ ((uint2*)&c)[0], 63U);
 #define ROUND(r)                    \
    	G(r,0,v[ 0],v[ 4],v[ 8],v[12]); \
    	G(r,1,v[ 1],v[ 5],v[ 9],v[13]); \
    	G(r,2,v[ 2],v[ 6],v[10],v[14]); \
    	G(r,3,v[ 3],v[ 7],v[11],v[15]); \
    	G(r,4,v[ 0],v[ 5],v[10],v[15]); \
    	G(r,5,v[ 1],v[ 6],v[11],v[12]); \
    	G(r,6,v[ 2],v[ 7],v[ 8],v[13]); \
    	G(r,7,v[ 3],v[ 4],v[ 9],v[14]);
```

The other reason the original author want the type of time is `uint64`.

## Specification

#### This just effect the core block length.
. Calc V
  .. According to the blake2b algorithm, random data of length 128 is blake2b 256 operation.
  ... Get V, you will find that the length becomes V,128 length V is below:
  
```cpp
  ulong v[16] = { 0x6a09e667f2bdc928, 0xbb67ae8584caa73b, 0x3c6ef372fe94f82b, 0xa54ff53a5f1d36f1,
	                0x510e527fade682d1, 0x9b05688c2b3e6c1f, 0x1f83d9abfb41bd6b, 0x5be0cd19137e2179,
	                0x6a09e667f3bcc908, 0xbb67ae8584caa73b, 0x3c6ef372fe94f82b, 0xa54ff53a5f1d36f1,
	                0x510e527fade68251, 0x9b05688c2b3e6c1f, 0xe07c265404be4294, 0x5be0cd19137e2179 }
```          
  ... Perform 12 rounds of operations,is will get a 32 bytes string
  
  .. Repeat the above steps,just get V of 32 length,v is below:
 
```cpp
  ulong v[16] = { 0x6a09e667f2bdc928, 0xbb67ae8584caa73b, 0x3c6ef372fe94f82b, 0xa54ff53a5f1d36f1,
	                0x510e527fade682d1, 0x9b05688c2b3e6c1f, 0x1f83d9abfb41bd6b, 0x5be0cd19137e2179,
	                0x6a09e667f3bcc908, 0xbb67ae8584caa73b, 0x3c6ef372fe94f82b, 0xa54ff53a5f1d36f1,
	                0x510e527fade682f1, 0x9b05688c2b3e6c1f, 0xe07c265404be4294, 0x5be0cd19137e2179 } 
```		
   ... Through the above comparison,the original data length is different, the effect is v[12]. 



## Backwards Compatibility

This is the core block change in private network ,so it will need remove the old block data. In the future it will be Tend to be stable.
    

## Use Cases

It run will in the private network,when mining new block,it don't occur any exceptions.

## Implementation

see https://git.diabin.com/HLC/nox/pulls/8

## Test Cases

In the git mining-dev repo,can test.

## See also

https://en.wikipedia.org/wiki/BLAKE_(hash_function)[Blake2b]
