    HIP: 1
    Title: The HIP Guidelines
    Author: Alex Wu <dindinw@users.noreply.github.com>
    Category: Information
    Status: Draft
    Created: 2018-01-01


## What is an HIP ?
HIP stands for HalalChain Improvement Proposal. An HIP is a design document providing information to the HalalChain community, or describing a new feature for HalalChain or its processes or environment. The HIP should provide a concise technical specification of the feature and a rationale for the feature.

We intend HIPs to be the primary mechanisms for proposing new features, for collecting community input on an issue, and for documenting the design decisions that have gone into HalalChain.The HIP author is responsible for building consensus within the community and documenting dissenting opinions.

Because the HIPs are maintained as text files in a versioned repository, their revision history is the historical record of the feature proposal.

For HalalChain implementers, HIPs are a convenient way to track the progress of their implementation. Ideally each implementation maintainer would list the HIPs that they have implemented. This will give end users a convenient way to know the current status of a given implementation or library.

the HIPs are written and maintained by developers with write access to the HIP codebase. The HIP editors monitor HIP changes, and correct any structure, grammar, spelling, or markup mistakes we see.

## HIP Types and Category

There are three types of HIP:

-   A **Standard HIP** describes any design propose and change that affects the HalalChain implementations, such as a change to the the network protocol, validity rules, proposed application standards/conventions, or any change or addition feature that affects the interoperability of applications using HalalChain. Furthermore Standard HIPs can be broken down into the following categories.
   * **Core** - HalalChain Core related improvements.
   * **Networking** - includes improvements around network protocol specifications.
   * **Interface** - includes improvements around client [API/RPC] specifications and standards, and also certain language-level standards like method names etc.
   * **Application** - application-level standards and conventions. 
-   An **Informational HIP** provides general guidelines or information to the HalalChain community, but does not propose a new feature. Informational HIPs do not necessarily represent HalalChain community consensus or a recommendation, so users and implementers are free to ignore Informational HIPs or follow their advice.
-   A **Process HIP** describes a process surrounding HalalChain or proposes a change to (or an event in) a process. Process HIPs are like Standards HIPs but apply to areas other than the HalalChain protocol itself. they often require community consensus; unlike Informational HIPs, they are more than recommendations, and users are typically not free to ignore them.

## HIP Work Flow

1. a draft HIP should be presented as a pull request(PR). This gives the author a chance to continuously edit the draft HIP for proper formatting and quality. This also allows for further public comment and the author of the HIP to address concerns about the proposal.

2. If the HIP collaborators approve, the HIP editor will assign the HIP a number (generally the issue or PR number related to the HIP), label it as a category, give it status “Draft”, and add it to the git repository.

3. The HIPs may a standard, informational or process HIP, which consist of design document, implementation, and finally if warranted an update to the formal specification. The HIP should be reviewed and accepted before an implementation is begun, unless an implementation will aid people in studying the HIP. Standards HIPs must be implemented before it can be considered Final.

4. Once an HIP has been accepted, the implementations must be completed. When the implementation is complete and accepted by the community, the status will be changed to “Final”.

5. An HIP can also be assigned status “Deferred”. means no progress is being made on the HIP. Once an HIP is deferred, the HIP editor can re-assign it to draft status

6. An HIP can also be “Rejected”. Perhaps after all is said and done it was not a good idea. It is still important to have a record of this fact.

7. An HIP can also be replaced by a different HIP, then the original HIP is obsoleted.

The possible paths of the status of HIPs are as follows:

image::hip-0001/hip_process.png[]


## Formats and Templates

1. HIPs should be written in markdown format. Image files should be included in a subdirectory for that HIP. ex: [hip-0001.asciidoc](hip-0001.asciidoc)'s images files should be included in the [hips/hip-0001](hip-0001) subdirectory of the HIPs repository.

2. Each HIP must begin with an RFC 822 style header preamble. The headers must appear in the following order. Headers marked with "*" are optional and are described below. All other headers are required.


    HIP: <to be assigned>
    Title: <HIP title>
    Author: <list of authors' names and optionally, email addresses>
    Category: <Core | Networking | Interface | Application | Information | Process> 
    Status: < Draft | Accepted | Deferred | Rejected | Withdrawn | Final | Replaced >
    Created: <date created on, in ISO 8601 (yyyy-mm-dd) format>
    Requires (*optional): <HIP number(s)>
    Replaces (*optional): <HIP number(s)>


3. Each HIP might include following parts:

    * **Abstract**: A short (~200 word) description of the technical issue being addressed.
    * **Motivation**: clearly explain why the HIP is needed or the existing protocol specification is inadequate to address the problem. submissions without sufficient motivation may be rejected outright.
    * **Specification**: The technical specification should describe the syntax and semantics of any new feature.
    * **Backwards Compatibility**: All HIPs that introduce backwards incompatibilities must include a section describing these incompatibilities and their severity. The HIP must explain how the author proposes to deal with these incompatibilities. HIP submissions without a sufficient backwards compatibility treatise may be rejected outright.
    * **Use Cases**: The Use case for an implementation are mandatory in most case. sometimes it exchangable with test cases.
    * **Implementation**: The implementations must be completed before any HIP is given status "Final", but it need not be completed before the HIP is accepted.
    * **Test Cases**: Test cases for an implementation are mandatory in most case. it can choose to include links to test cases if applicable.
    * **See also**: The references links might list here

4. A template file [hip-x.asciidoc](hip-x.asciidoc) is available to copy and modify for creating an new HIP.

## History

This document was derived heavily from https://github.com/bitcoin/bips/blob/master/bip-0001.mediawiki[Bitcoin's BIP-0001] and https://github.com/ethereum/EIPs/blob/master/EIPS/eip-1.md[Ethterum's EIP-1]
